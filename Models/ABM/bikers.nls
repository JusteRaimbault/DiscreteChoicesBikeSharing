;;;;;;;;;;;;;;;;;
;; Bikers procedures
;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;;
;; Rq: most of move procedure simplified from Urban Mobility project code, CSSS2013
;; (authors ...)
;;
;; Check out at <a href=https://www.github.com/UrbanMobility/UrbanMobilityNew>Github repository</a>
;;
;;;;;;;;;;;


;;beware : values of length of edges may not be at scale -> check that and add a scaling factor during import of GIS data if needed.

;;people are always travelling, we neglect decision time (could it be wrong ? at small scales maybe.
;;Could explore robustness of the model of simulation regarding this assumption

to move-bikers
  ;;procedure for just move, rerouting or dying will be done separately
  ask bikers with [not walking?][move-one-time-step]
end


to move-one-time-step
  
  ;do we need to cumul travel time ?
  ;set travel-time travel-time + 1
  set remaining-time-in-tick real-time-step
  
  while [remaining-time-in-tick > 0 ] [
    move-in-current-edge
  ]
  
end


to move-in-current-edge
;;go ahaed as much as possible during time offered and regarding length of edge, change edge if needed.
    
    let possible-distance-in-edge speed * real-time-step
    
    ifelse possible-distance-in-edge < remaining-distance-in-edge [
      
      ;;simple move : the agent don't finish the edge, advance just in one step without changing current edge
      ;;don't forget update remaining distance
      
      set remaining-time-in-tick 0
      set remaining-distance-in-edge remaining-distance-in-edge - possible-distance-in-edge
      
      ;;heading has to be set: ok dont forget to set it at the beginning of a travel (fur current, done at edge change)
      fd possible-distance-in-edge / real-patch-size
      
    ][
      ;; the other case go to end of edge
      ;; decrease remaining time by time to reach it
      ;; update current-edge
      
      fd remaining-distance-in-edge / real-patch-size
      set remaining-distance-in-edge 0
      set remaining-time-in-tick remaining-time-in-tick - (remaining-distance-in-edge / speed) 
      change-edge-or-finish-travel
      
    ]
    
end


to change-edge-or-finish-travel
  ;;if travel is finished == current path is empty, do nothing
  ifelse current-travel != [][
    ;else change edge and continue travel
    
    ;;position correction -> needed ?
    let n one-of (([both-ends] of current-edge) with-min [distance myself])
    setxy [xcor] of n [ycor] of n ;;strange but seems faster than move-to!
    
    ;;change edge
    set current-edge first current-travel
    set current-travel but-first current-travel
    set remaining-distance-in-edge [link-length * real-patch-size] of current-edge
    ;;dont forget heading !!!
    let h 0
    set n one-of (([both-ends] of current-edge) with-min [distance myself])
    ask current-edge [
      ask n [set h towards other-end ]
    ]
    set heading h
  ][
    set remaining-time-in-tick 0
  ]
end




to start-travel-within-zone [origin]
  ;;we need to take a bike in the nearest station
    let dep-station one-of stations with-min [distance origin]
    ;inspect self show user-yes-or-no? (word ([standing-bikes] of dep-station) dep-station)
    ifelse ([standing-bikes] of dep-station) > 0 [
      ask dep-station [set standing-bikes standing-bikes - 1]
      if adverse? = 0 [set adverse? false]
      new-traveler false origin
    ][
      ;;put the guy in departure queue
      ;;info drawn here
      set has-information? (random-float 100 < info-proportion)
      let new-dep-station nobody
      ifelse has-information? [set new-dep-station one-of (stations with [standing-bikes > 0]) with-min [distance myself]]
      [set new-dep-station one-of stations in-radius (tolerance-radius / real-patch-size) with [self != dep-station]]
      if new-dep-station = nobody [set new-dep-station one-of stations]
      let t 0 let d 0 ask dep-station [set d distance new-dep-station set t max list 1 d / mean-walker-speed]
      ;;no randomness more here, it's already a fucking gas factory
      set hidden? true set-vars set walking? true set out-travel? true  set adverse? true
      set travel-distance travel-distance + d
      put-in-dep-queue ticks + t self new-dep-station
    ]
end





;;constructor for bikers, should be called by observer because vertices or stations can't hatch biker !
to new-traveler [entering? origin]
  
  set total-travel-count total-travel-count + 1
  set current-travel-count current-travel-count + 1
  
  ;;information -- has to be set first since destination can depend on it
  ifelse random-float 100 < info-proportion [set has-information? true][set has-information? false]
  
  let o nobody ask origin [set o one-of cached-vertices with-min [distance myself]]
  
  ;;pick a destination
  let d nobody
  ifelse entering?[
    set d check-info-entering pick-destination  set adverse? false
  ][
    ;;internal travels can be possible !
    ifelse random-float 100 < internal-travel-prop [
      set d check-info-entering pick-destination 
    ][
      let io one-of io-vertices set d one-of cached-vertices with-min [distance io]
      set out-travel? true
      set total-out-travel-count total-out-travel-count + 1
      set current-out-travel-count current-out-travel-count + 1
    ]
  ]
  
  ;;bord effect ! ?
  if d = o [set d one-of cached-vertices with [self != o]]
  
  set-vars
  
  ;;set travel
  set current-travel get-symmetric-table cached-paths (list ([who] of o) ([who] of d)) 
  set theoretical-travel-distance get-symmetric-table cached-distances (list ([who] of o) ([who] of d)) 
  set travel-distance travel-distance + theoretical-travel-distance
  if not member? o [both-ends] of first current-travel [set current-travel reverse current-travel]
  
  set current-objective d
  set current-origin o
        
  enter-travel
end


;;requires current-origin and current-travel have been set !
to enter-travel
  move-to current-origin
  set current-edge first current-travel
  set current-travel but-first current-travel
  set remaining-distance-in-edge [link-length * real-patch-size] of current-edge
  let h 0 let o current-origin ask current-edge [ask o [set h towards other-end]] set heading h     
end

to-report check-info-entering [d]
  let res d
  if has-information? [let s one-of stations with [(capacity - standing-bikes > 0)] with-min [distance d] set res one-of cached-vertices with-min [distance s]]
  set out-travel? false
  report res
end


to-report pick-destination
  let tot 0
  foreach destination-probas [ set tot tot + item ticks ?]
  if tot = 0 [report one-of cached-vertices]
  let r random-float tot
  let k 0 set tot 0
  foreach destination-probas [
     let i floor (k / data-width-steps)
     let j remainder k data-width-steps
     set tot tot + item ticks ?
     if r < tot [
       let p patch min list (world-width - 1) floor (i * world-width / data-width-steps)  min list (world-height - 1) floor (j * world-height / data-width-steps)
       report one-of cached-vertices with-min [distance p]
     ]
     set k k + 1
  ]
  report one-of cached-vertices
end




to-report pick-origin
  let tot 0
  foreach origin-probas [ set tot tot + item ticks ?]
  if tot = 0 [report one-of cached-vertices]
  let r random-float tot
  let k 0 set tot 0
  foreach origin-probas [
     let i floor (k / data-width-steps)
     let j remainder k data-width-steps
     set tot tot + item ticks ?
     if r < tot [
       let p patch min list (world-width - 1) floor (i * world-width / data-width-steps)  min list (world-height - 1) floor (j * world-height / data-width-steps)
       report one-of cached-vertices with-min [distance p]
     ]
     set k k + 1
  ]
  report one-of cached-vertices
end




to reroute-to-station
  ;;procedure to find station in tolerance radius, where to drop bike !
  ;;here we go to not-cached vertices, shortest path calc done by hand !
  let o one-of vertices with-min [distance myself]
  let d nobody
  ifelse has-information? [
    ;;both finds -> where there is place; and the closest !
    let possibles (stations with [capacity - standing-bikes > 0])    
    ;;if no station, have to get out of the zone
    ifelse count possibles = 0 [let io one-of io-vertices set d one-of cached-vertices with-min [distance io] set out-travel? true]
    [let s first sort-on [distance myself] possibles set d one-of vertices with-min [distance s]]
  ][
    ;;no info: that's where tolerance radius appears
    let s one-of (stations in-radius (tolerance-radius / real-patch-size)) with [distance myself > 5 and not member? self [visited-stations] of myself] if s = nobody [set s one-of stations]
    set d one-of vertices with-min [distance s]
  ]
  let p [] let dis 0
  ask o [set p nw:weighted-path-to d "edge-length" set dis nw:weighted-distance-to d "edge-length"]
  set current-travel p set current-origin o set current-objective d
  set travel-distance travel-distance + dis
  ifelse o = d [move-to one-of stations with-min [distance myself]][enter-travel]
end


to drop-bike[target-station]
  ;;only increase standing bikes
  ask target-station [set standing-bikes standing-bikes + 1]
end



to set-vars
  ;;basics
  set size 20 set shape "bike" set color 86
  set redirected? false set walking? false
  set visited-stations []
  
  ;;set characs
  set speed mean-biker-speed
  set tolerance-radius mean-tolerance-radius
end


to end-travel
  if out-travel? [set current-out-travel-count current-out-travel-count - 1]
  set current-travel-count current-travel-count - 1
  set cum-trav-speed cum-trav-speed + (travel-distance / theoretical-travel-distance)
  if adverse? [set adv-number adv-number + 1 set cum-det-trav-speed cum-det-trav-speed + (travel-distance / theoretical-travel-distance)]
  die
end

;;;;;;;; discrete choice probability
to-report dc-choice
  let o one-of vertices with-min [distance myself]
  let d nobody
  let um 0 let uw 0
  ifelse has-information? [
    ;;both finds -> where there is place; and the closest !
    let possibles (stations with [capacity - standing-bikes > 0])    
    ;;if no station, have to get out of the zone
    ifelse count possibles = 0 [let io one-of io-vertices set d one-of cached-vertices with-min [distance io] set out-travel? true]
    [let s first sort-on [distance myself] possibles set d one-of vertices with-min [distance s]]
    set uw beta-waiting * mean-waiting-time + beta-moving * (distance current-objective)
    set um beta-waiting * (distance d)/ mean-biker-speed + beta-moving * ([distance d] of current-objective)
  ][
    ;;no info: that's where tolerance radius appears
    let s one-of (stations in-radius (tolerance-radius / real-patch-size)) with [distance myself > 5 and not member? self [visited-stations] of myself] if s = nobody [set s one-of stations]
    set d one-of vertices with-min [distance s]
    set uw beta-waiting * mean-waiting-time 
    set um beta-waiting * (distance d)/ mean-biker-speed ; mean distance theoretocally
  ]
  
  let p exp (- uw) / (exp(- uw)+ exp(- um)) 
  ifelse random-float 1 < p [report 0]
  [report 1]
end
  


