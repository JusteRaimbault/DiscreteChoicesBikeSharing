;;;;;;;;;;;;;;
;; Specific procedures for Gradient descent calibration
;;;;;;;;;;;;;;








to setup-calibration
   ;; hand setup of param space
   set calibration-parameters-names ["mean-tolerance-radius" "info-proportion" "kernel-size"]
   set calibration-parameters-bounds [[300 600][0 100][20 100]]
   set calibration-parameters-steps [20 10 20]
   set calibration-objective-values table:make
end




to run-calibration
  

end



;;;;;;;
;; Generic subprocess to be called both by NL calib procedure
;; and python cloning algo
;;
;; Computes local values of MSE in grid neighborhood of given point
;; Returns map of values.
;;  - input point as list of values
;;
;;  - calibration-parameters-names as global
;;  - calibration-parameters-steps as global
;; 
;;;;;;;;;;;;;;

to-report compute-local-mse-values [n-repets parameter-values]
  
  ;; Needs a security check on param-values
  ;; as the function can be called externally
  if (length parameter-values != length calibration-parameters-names) [
     error "Wrong call to gradient function (param number)"
  ]
  
  ;;let construct a local grid plan from values
  ;; a bit of work to build from values list
  ;; (to be more flexible with external calls)
  
  ;;
  ;; BEWARE : number of points ? == 2*d + 1
  ;;  -> not on a complete grid

  let i 0
  let points (list parameter-values)
  foreach parameter-values [
     let step (item i calibration-parameters-steps)
     set points lput (replace-item i parameter-values (? + step)) (lput (replace-item i parameter-values (? - step)) points)
     set i i + 1
  ]
  ;let points grid-experience-plan param-names-and-bounds ;; NO -> gives a 3^d experience plan, only 2*d needed for gradient computation (2*d+1 as we add current point)
  
  
  ;; Run Model on constructed points
  
  let values table:make  
  
  foreach points [
    ;; Note : setup here is deterministic, can exchange order of setup/repets
    ;;
    ;; setup parameters
    ;; exploration setup    
    ;; then go number of repets
    ;;
    
    ;; first check if point has already been visited, if yes get result from table, if not compute.
    ifelse table:has-key? calibration-objective-values ? [
      table:put values ? table:get calibration-objective-values ?
    ][
      ; compute the point
      output-print (word "Mse on point " ?)
      
      table:put values ? []
    
      foreach ? [run (word word word "set " (first ?) " " (last ?))]
      setup-exploration
    
      repeat n-repets [
        let conf ?
        carefully [
          repeat total-time-steps [
            go-for-one-time-step
          ]
          let obj mse-lf-timeseries
          table:put values ? (lput obj (table:get values ?))
          ]
        [
          ; catch exception (what case ?) : do nothing. (failed repetition)
          output-print error-message
        ]
      ]
      ; store final values in global table
      table:put calibration-objective-values ? (table:get values ?)
    ]
  ]
  
  report values
  
end